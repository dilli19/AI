from collections import deque

def move_tile(state, direction):
    # Find the blank tile (represented by 0).
    i, j = next((i, j) for i, row in enumerate(state) for j, val in enumerate(row) if val == 0)

    # Directions: up, down, left, right
    if direction == 'up' and i > 0:
        new_state = [list(row) for row in state]  # Deep copy
        new_state[i][j], new_state[i-1][j] = new_state[i-1][j], new_state[i][j]
        return new_state
    elif direction == 'down' and i < 2:
        new_state = [list(row) for row in state]
        new_state[i][j], new_state[i+1][j] = new_state[i+1][j], new_state[i][j]
        return new_state
    elif direction == 'left' and j > 0:
        new_state = [list(row) for row in state]
        new_state[i][j], new_state[i][j-1] = new_state[i][j-1], new_state[i][j]
        return new_state
    elif direction == 'right' and j < 2:
        new_state = [list(row) for row in state]
        new_state[i][j], new_state[i][j+1] = new_state[i][j+1], new_state[i][j]
        return new_state
    return None

def solve_8_puzzle(initial_state):
    goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
    visited = set()
    queue = deque([(initial_state, [])])  # State and path

    while queue:
        current_state, path = queue.popleft()
        visited.add(tuple(tuple(row) for row in current_state))  # Hashable state

        if current_state == goal_state:
            return path

        for direction in ['up', 'down', 'left', 'right']:
            new_state = move_tile(current_state, direction)
            if new_state and tuple(tuple(row) for row in new_state) not in visited:
                queue.append((new_state, path + [direction]))

    return None

# Example usage:
initial_state = [[1, 2, 3], [4, 0, 5], [7, 8, 6]]
solution = solve_8_puzzle(initial_state)

if solution:
    print("Solution found:")
    for step in solution:
        print(step)
else:
    print("No solution found.")
